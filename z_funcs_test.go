// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package lua

import (
	"context"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
)

func funcStringString(v String) (String, error) {
	return newTestValue(TypeString).(String), nil
}

func funcStringStringWithErr(v String) (String, error) {
	return newTestValue(TypeString).(String), errors.New("boom")
}

func Test_StringString(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcStringString)
	m.Register("test2", funcStringStringWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.Error(t, err)
	}
}

func funcStringNumber(v String) (Number, error) {
	return newTestValue(TypeNumber).(Number), nil
}

func funcStringNumberWithErr(v String) (Number, error) {
	return newTestValue(TypeNumber).(Number), errors.New("boom")
}

func Test_StringNumber(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcStringNumber)
	m.Register("test2", funcStringNumberWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.Error(t, err)
	}
}

func funcStringBool(v String) (Bool, error) {
	return newTestValue(TypeBool).(Bool), nil
}

func funcStringBoolWithErr(v String) (Bool, error) {
	return newTestValue(TypeBool).(Bool), errors.New("boom")
}

func Test_StringBool(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcStringBool)
	m.Register("test2", funcStringBoolWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeString).(String))
		assert.Error(t, err)
	}
}

func funcNumberString(v Number) (String, error) {
	return newTestValue(TypeString).(String), nil
}

func funcNumberStringWithErr(v Number) (String, error) {
	return newTestValue(TypeString).(String), errors.New("boom")
}

func Test_NumberString(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcNumberString)
	m.Register("test2", funcNumberStringWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.Error(t, err)
	}
}

func funcNumberNumber(v Number) (Number, error) {
	return newTestValue(TypeNumber).(Number), nil
}

func funcNumberNumberWithErr(v Number) (Number, error) {
	return newTestValue(TypeNumber).(Number), errors.New("boom")
}

func Test_NumberNumber(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcNumberNumber)
	m.Register("test2", funcNumberNumberWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.Error(t, err)
	}
}

func funcNumberBool(v Number) (Bool, error) {
	return newTestValue(TypeBool).(Bool), nil
}

func funcNumberBoolWithErr(v Number) (Bool, error) {
	return newTestValue(TypeBool).(Bool), errors.New("boom")
}

func Test_NumberBool(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcNumberBool)
	m.Register("test2", funcNumberBoolWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeNumber).(Number))
		assert.Error(t, err)
	}
}

func funcBoolString(v Bool) (String, error) {
	return newTestValue(TypeString).(String), nil
}

func funcBoolStringWithErr(v Bool) (String, error) {
	return newTestValue(TypeString).(String), errors.New("boom")
}

func Test_BoolString(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcBoolString)
	m.Register("test2", funcBoolStringWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.Error(t, err)
	}
}

func funcBoolNumber(v Bool) (Number, error) {
	return newTestValue(TypeNumber).(Number), nil
}

func funcBoolNumberWithErr(v Bool) (Number, error) {
	return newTestValue(TypeNumber).(Number), errors.New("boom")
}

func Test_BoolNumber(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcBoolNumber)
	m.Register("test2", funcBoolNumberWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.Error(t, err)
	}
}

func funcBoolBool(v Bool) (Bool, error) {
	return newTestValue(TypeBool).(Bool), nil
}

func funcBoolBoolWithErr(v Bool) (Bool, error) {
	return newTestValue(TypeBool).(Bool), errors.New("boom")
}

func Test_BoolBool(t *testing.T) {
	m := &Module{Name: "test"}
	m.Register("test1", funcBoolBool)
	m.Register("test2", funcBoolBoolWithErr)

	{ // Happy path
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test1(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.NoError(t, err)
	}

	{ // Invalid argument
		s, err := FromString("", `
		local api = require("test")
		function main(input)
			return api.test2(input)
		end`, m)
		assert.NotNil(t, s)
		assert.NoError(t, err)
		_, err = s.Run(context.Background(), newTestValue(TypeBool).(Bool))
		assert.Error(t, err)
	}
}
